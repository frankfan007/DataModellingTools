#!/usr/bin/env python
"""
ASN.1 to AADL VDM architecture exporter. 

This is a tool developed in the framework og the European project
INTO-CPS. 

e-mail: t.fabbri<at>yahoo.com

"""
import os
import re
import sys
import copy
import shutil
import getopt
import tempfile
import platform
from subprocess import Popen, PIPE
import distutils.spawn as spawn

from .commonPy import configMT
from .commonPy import asnParser
from .commonPy.asnParser import g_modules
from .commonPy import __version__

from .commonPy.asnAST import (
    AsnBasicNode, AsnBool, AsnReal, AsnInt,
    AsnEnumerated, AsnString, AsnChoice, AsnSequence,
    AsnSequenceOf, AsnSet, AsnSetOf)


from .commonPy.utility import inform, panic, mysystem

g_keepFiles = False
g_privateHeapSize = -1
g_platformCompilers = ['gcc']
# Ada package names per type
g_AdaPackageNameOfType = {}


def cleanNameAsAADLWants(name):
    return re.sub(r'[^a-zA-Z0-9_]', '_', name)


def cleanNameAsAsn1cWants(name):
    return cleanNameAsAADLWants(name)


g_lowerFloat = -1e350
g_upperFloat = 1e350


def ASNtoACN(asnFilename):
    replaces = {
        ".asn": ".acn",
        ".asn1": ".acn",
        ".ASN": ".ACN",
        ".ASN1": ".ACN",
    }
    for k, v in list(replaces.items()):
        if asnFilename.endswith(k):
            return asnFilename.replace(k, v)
    return asnFilename + ".acn"


def usage():
    panic("""\
Usage: asn2aadlPlus.py <options> <files> outputDataSpec.aadl

Where <files> is a list of ASN.1 and ACN files, and options can be:

    -k, --keep	    Don't delete temporary files
    -a, --aadlv2    Generate AADLv2 compliant output
    -v, --version   Show version number
    -d, --debug	    Enable debug output
    -p, --platform  Comma seperated list of platform compilers (default: gcc)
    -h, --help	    This help message""")


def main():
    if "-v" in sys.argv:
        import pkg_resources  # pragma: no cover
        version = pkg_resources.require("dmt")[0].version  # pragma: no cover
        print("asn2aadlVDM v" + str(version))  # pragma: no cover
        sys.exit(1)  # pragma: no cover

    global g_keepFiles
    global g_privateHeapSize

    # Backwards compatibility - the '-acn' option is no longer necessary
    # (we auto-detect ACN files via their extension)
    while "-acn" in sys.argv:
        ofs = sys.argv.index("-acn")
        del sys.argv[ofs]
    if "-aadlv2" in sys.argv:
        ofs = sys.argv.index("-aadlv2")
        sys.argv[ofs] = '--aadlv2'

    try:
        optlist, args = getopt.gnu_getopt(sys.argv[1:], "hvkadt:", ['help', 'version', 'keep', 'aadlv2', 'debug', 'platform=', 'test='])
    except:
        usage()

    bAADLv2 = False
    g_keepFiles = False
    g_privateHeapSize = -1

    for opt, arg in optlist:
        if opt in ("-h", "--help"):
            usage()
        elif opt in ("-v", "--version"):
            print("ASN2AADL v%s" % __version__)
            sys.exit(0)
        elif opt in ("-d", "--debug"):
            configMT.debugParser = True
        elif opt in ("-a", "--aadlv2"):
            # Updated, June 2011: AADLv1 no longer supported.
            bAADLv2 = True
        elif opt in ("-k", "--keep"):
            g_keepFiles = True
        elif opt in ("-t", "--test"):
            g_privateHeapSize = int(arg)

    if len(args) < 2:
        usage()

    for x in args[:-1]:
        if not os.path.isfile(x):
            panic("'%s' is not a file!\n" % x)

    aadlFile = args[-1]
    inputFiles = args[:-1]

    # Parse the ASN.1 files (skip the ACN ones)
    asnParser.ParseAsnFileList([x for x in inputFiles if not x.lower().endswith('.acn')])
    autosrc = tempfile.mkdtemp(".asn1c")
    inform("Created temporary directory (%s) for auto-generated files...", autosrc)
    absPathOfAADLfile = os.path.abspath(aadlFile)

    # A, those good old days... I could calculate the buffer size for BER (SIZ), and then compare
    # it to the size for Native (SIZ2, see above) and the max of the two suffices for any conf of the message.
    # CHOICEs, however, changed the picture...  what to put in?
    # Time to use the maximum of Native (SIZ2) and UPER (SIZE) and ACN (SIZ3)...

    base = os.path.basename(aadlFile)
    base = re.sub(r'\..*$', '', base)

    # AADL creation
    o = open(absPathOfAADLfile, 'w')
    o.write('--------------------------------------------------------\n')
    o.write('--! File generated by asn2aadlVDM v%s: DO NOT EDIT !\n' % __version__)
    o.write('--------------------------------------------------------\n\n')
    o.write('SUBPROGRAM vdm_architecture\n')
    o.write('FEATURES\n')

    for mName in g_modules:
        typeList = g_modules[mName]
        for asnTypename in typeList:
            node = asnParser.g_names[asnTypename]
            if node._isArtificial:
                continue
            o.write('\tin_{}:IN PARAMETER {}::{} {{encoding=>UPER;}};\n'.format(asnTypename, mName, asnTypename))
            o.write('\tout_{}:OUT PARAMETER {}::{} {{encoding=>UPER;}};\n\n'.format(asnTypename, mName, asnTypename))
    o.write('END vdm_architecture;\n\n')

    o.write('SUBPROGRAM IMPLEMENTATION vdm_architecture.Vdm\n')
    o.write('PROPERTIES\n')
    o.write('\tFV_Name => "vdm_architecture_fv_Vdm";\n')
    o.write('\tSource_Language => Vdm;\n')
    o.write('END vdm_architecture.Vdm;\n')
    o.close()

    if not g_keepFiles:
        shutil.rmtree(autosrc)
    else:
        print("Generated message buffers in '%s'" % autosrc)

if __name__ == "__main__":
    if "-pdb" in sys.argv:
        sys.argv.remove("-pdb")  # pragma: no cover
        import pdb  # pragma: no cover pylint: disable=wrong-import-position,wrong-import-order
        pdb.run('main()')  # pragma: no cover
    else:
        main()

# vim: tabstop=8 expandtab shiftwidth=4 softtabstop=4
