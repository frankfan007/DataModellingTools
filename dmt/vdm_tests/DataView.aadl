--------------------------------------------------------
--! File generated by asn2aadl v2.0.3: DO NOT EDIT !
--------------------------------------------------------

package DataView

public

-- No more private heap required (we use the space certified compiler)
-- Memory_Required: 0

DATA MInt
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataTypes.asn");
    Ada_Package_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 8; suggested aligned message buffer is...
    Source_Data_Size => 8 B;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MInt";
    -- what kind of type is this?
    assert_properties::ASN1_Basic_Type =>aINTEGER;
END MInt;

DATA MInt_Buffer_Max
END MInt_Buffer_Max;

DATA IMPLEMENTATION MInt_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MInt
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (data ASSERT_Types::Stream_Element);
END MInt_Buffer_Max.impl;

DATA MInt_Buffer
END MInt_Buffer;

DATA IMPLEMENTATION MInt_Buffer.impl
    -- Buffer to hold a marshalled data of type MInt
SUBCOMPONENTS
    Buffer : data MInt_Buffer_Max.impl;
    Length : data Base_Types::uint16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MInt_Buffer.impl;

DATA MEnum
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataTypes.asn");
    Ada_Package_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 4; suggested aligned message buffer is...
    Source_Data_Size => 8 B;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MEnum";
    -- what kind of type is this?
    assert_properties::ASN1_Basic_Type =>aENUMERATED;
END MEnum;

DATA MEnum_Buffer_Max
END MEnum_Buffer_Max;

DATA IMPLEMENTATION MEnum_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MEnum
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (data ASSERT_Types::Stream_Element);
END MEnum_Buffer_Max.impl;

DATA MEnum_Buffer
END MEnum_Buffer;

DATA IMPLEMENTATION MEnum_Buffer.impl
    -- Buffer to hold a marshalled data of type MEnum
SUBCOMPONENTS
    Buffer : data MEnum_Buffer_Max.impl;
    Length : data Base_Types::uint16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MEnum_Buffer.impl;

DATA MOct
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataTypes.asn");
    Ada_Package_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 44; suggested aligned message buffer is...
    Source_Data_Size => 48 B;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MOct";
    -- what kind of type is this?
    assert_properties::ASN1_Basic_Type =>aSTRING;
END MOct;

DATA MOct_Buffer_Max
END MOct_Buffer_Max;

DATA IMPLEMENTATION MOct_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MOct
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (48); -- Size of the buffer
    Data_Model::Base_Type => (data ASSERT_Types::Stream_Element);
END MOct_Buffer_Max.impl;

DATA MOct_Buffer
END MOct_Buffer;

DATA IMPLEMENTATION MOct_Buffer.impl
    -- Buffer to hold a marshalled data of type MOct
SUBCOMPONENTS
    Buffer : data MOct_Buffer_Max.impl;
    Length : data Base_Types::uint16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MOct_Buffer.impl;

DATA MBool
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataTypes.asn");
    Ada_Package_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 1; suggested aligned message buffer is...
    Source_Data_Size => 8 B;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MBool";
    -- what kind of type is this?
    assert_properties::ASN1_Basic_Type =>aBOOLEAN;
END MBool;

DATA MBool_Buffer_Max
END MBool_Buffer_Max;

DATA IMPLEMENTATION MBool_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MBool
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (data ASSERT_Types::Stream_Element);
END MBool_Buffer_Max.impl;

DATA MBool_Buffer
END MBool_Buffer;

DATA IMPLEMENTATION MBool_Buffer.impl
    -- Buffer to hold a marshalled data of type MBool
SUBCOMPONENTS
    Buffer : data MBool_Buffer_Max.impl;
    Length : data Base_Types::uint16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MBool_Buffer.impl;

DATA MSeq
PROPERTIES
    -- name of the ASN.1 source file:
    Source_Text => ("DataTypes.asn");
    Ada_Package_Name => "DataView";
    Source_Language => ASN1;
    -- Size of a buffer to cover all forms of message representation:
    -- Real message size is 5; suggested aligned message buffer is...
    Source_Data_Size => 8 B;
    -- name of the corresponding data type in the source file:
    Type_Source_Name => "MSeq";
    -- what kind of type is this?
    assert_properties::ASN1_Basic_Type =>aSEQUENCEOF;
END MSeq;

DATA MSeq_Buffer_Max
END MSeq_Buffer_Max;

DATA IMPLEMENTATION MSeq_Buffer_Max.impl
    -- Buffer to hold a marshalled data of type MSeq
PROPERTIES
    Data_Model::Data_Representation => array;
    Data_Model::Dimension => (8); -- Size of the buffer
    Data_Model::Base_Type => (data ASSERT_Types::Stream_Element);
END MSeq_Buffer_Max.impl;

DATA MSeq_Buffer
END MSeq_Buffer;

DATA IMPLEMENTATION MSeq_Buffer.impl
    -- Buffer to hold a marshalled data of type MSeq
SUBCOMPONENTS
    Buffer : data MSeq_Buffer_Max.impl;
    Length : data Base_Types::uint16;
PROPERTIES
    Data_Model::Data_Representation => Struct;
END MSeq_Buffer.impl;

end DataView;
